const TelegramApi = require("node-telegram-bot-api");
const bcrypt = require("bcryptjs");
require("dotenv").config();

const Website = require("./models/Website");
const User = require("./models/User");

const bot = new TelegramApi(process.env.TELEGRAM, { polling: true });
console.log("bot working");

bot.setMyCommands([
  { command: "/start", description: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã" },
  { command: "/websites", description: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–æ–≤" },
  { command: "/auth", description: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" },
  { command: "/cancelnotifications", description: "–û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ" },
  { command: "/setnotifications", description: "–í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ" },
]);

async function start(chat) {
  await bot.sendSticker(
    chat.id,
    "https://tlgrm.eu/_/stickers/ccd/a8d/ccda8d5d-d492-4393-8bb7-e33f77c24907/1.webp"
  );
  return await bot.sendMessage(
    chat.id,
    "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–∂–≤–∞—Ç—å!**\n \n–ù–∞–ø–∏—à–∏—Ç–µ `/auth Email Password` —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n \n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `/websites` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤",
    {
      parse_mode: "Markdown",
    }
  );
}

async function websites(chat) {
  const websites = await Website.find({});
  let message = "";
  for (let website of websites) {
    message =
      message +
      `–°–∞–π—Ç: [${website.title}](${website.url})\n–î–æ—Å—Ç—É–ø–µ–Ω: ${
        website.isAccessible ? "‚úÖ" : "üö´"
      }\n \n`;
  }
  return await bot.sendMessage(chat.id, message, {
    parse_mode: "Markdown",
  });
}

async function auth(chat, text) {
  const email = text.split(" ")[1];
  const password = text.split(" ")[2];
  const user = await User.findOne({ email: email });
  if (!user) {
    return await bot.sendMessage(chat.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  }
  if (user.telegramChatId != null) {
    return await bot.sendMessage(
      chat.id,
      "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω telegram"
    );
  }
  const hashPassword = user.password;
  const validPassword = bcrypt.compareSync(password, hashPassword);
  if (!validPassword) {
    return await bot.sendMessage(chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
  }
  user.telegramChatId = chat.id;
  await user.save();
  await bot.sendMessage(chat.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
  return await bot.sendMessage(
    chat.id,
    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω—è, –µ—Å–ª–∏ —Å–∞–π—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –í–£–ó–æ–≤ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\n \n–ß—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ `/cancelnotifications`",
    { parse_mode: "Markdown" }
  );
}

async function cancelnotifications(chat) {
  const user = await User.findOneAndUpdate({ telegramChatId: chat.id });
  if (!user) {
    return await bot.sendMessage(
      caht.id,
      "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —á—Ç–æ –±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `/auth Email Password`"
    );
  }
  if (user.notifications) {
    user.notifications = false;
    await user.save();
    return await bot.sendMessage(chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã");
  } else {
    return await bot.sendMessage(chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã");
  }
}

async function setnotifications(chat) {
  const user = await User.findOne({ telegramChatId: chat.id });
  if (!user) {
    return await bot.sendMessage(
      caht.id,
      "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —á—Ç–æ –±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `/auth Email Password`"
    );
  }
  if (!user.notifications) {
    user.notifications = true;
    await user.save();
    return await bot.sendMessage(chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã");
  } else {
    return await bot.sendMessage(chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã");
  }
}

bot.on("message", (msg) => {
  const { text, chat } = msg;
  if (text === "/start") {
    start(chat);
  }
  if (text === "/websites") {
    websites(chat);
  }
  if (text.split(" ")[0] === "/auth") {
    auth(chat, text);
  }
  if (text === "/cancelnotifications") {
    cancelnotifications(chat);
  }
  if (text === "/setnotifications") {
    setnotifications(chat);
  }
});

async function sendNotify(website) {
  const users = await User.find({});
  for (let user of users) {
    if (
      user.telegramChatId == null ||
      user.notifications == false ||
      user.blockedSites.includes(website)
    ) {
      return 0;
    }
    if (website.isAccessible) {
      await bot.sendSticker(
        user.telegramChatId,
        "https://tlgrm.eu/_/stickers/ccd/a8d/ccda8d5d-d492-4393-8bb7-e33f77c24907/192/22.webp"
      );
      return await bot.sendMessage(
        user.telegramChatId,
        `–°–∞–π—Ç [${website.title}](${website.url}) –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É`,
        { parse_mode: "Markdown" }
      );
    } else {
      await bot.sendSticker(
        user.telegramChatId,
        "https://tlgrm.eu/_/stickers/ccd/a8d/ccda8d5d-d492-4393-8bb7-e33f77c24907/23.webp"
      );
      return await bot.sendMessage(
        user.telegramChatId,
        `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–∞–π—Ç [${website.title}](${website.url}) –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`,
        { parse_mode: "Markdown" }
      );
    }
  }
}

module.exports = { sendNotify };
